{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./server.js","webpack:///external \"ejs\"","webpack:///external \"express\"","webpack:///external \"os\"","webpack:///external \"superagent\""],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFa;;;AAGb;AACA,cAAc,mBAAO,CAAC,wBAAS;AAC/B,cAAc,mBAAO,CAAC,8BAAY;;AAElC;AACA;AACA,SAAS,mBAAO,CAAC,cAAI;AACrB;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA,KAAK;;AAEL,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kBAAkB,mBAAO,CAAC,gBAAK,aAAa;AAC5C;AACA;AACA;;;;AAIA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,8BAA8B,gBAAgB;AAC9C;AACA,KAAK;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,+BAA+B,kBAAkB;AACjD;AACA,KAAK;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,4BAA4B;AAChE;AACA,KAAK;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;;AAED;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL,CAAC;;AAED;AACA;;;;;;;;;;;;ACpIA,gC;;;;;;;;;;;ACAA,oC;;;;;;;;;;;ACAA,+B;;;;;;;;;;;ACAA,uC","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./server.js\");\n","'use strict';\r\n\r\n\r\n// Declare our dependencies\r\nvar express = require('express');\r\nvar request = require('superagent');\r\n\r\nvar backendHost = process.env.BACK_HOST;\r\nvar backendPort = process.env.BACK_PORT;\r\nvar os = require('os');\r\nvar ifaces = os.networkInterfaces();\r\n\r\nfunction getIpAdresses(){\r\n\r\n  var ipAdresses= \"\";\r\n  Object.keys(ifaces).forEach(function (ifname) {\r\n    var alias = 0;\r\n  \r\n    ifaces[ifname].forEach(function (iface) {\r\n      if ('IPv4' !== iface.family || iface.internal !== false) {\r\n        // skip over internal (i.e. 127.0.0.1) and non-ipv4 addresses\r\n        return;\r\n      }\r\n  \r\n      if (alias >= 1) {\r\n        // this single interface has multiple ipv4 addresses\r\n        ipAdresses += ifname + ': ' + alias, iface.address ;\r\n      } else {\r\n        // this interface has only one ipv4 adress\r\n        ipAdresses += ifname+ ': ' + iface.address;\r\n  \r\n      }\r\n      ++alias;\r\n    });\r\n    \r\n  });\r\n  \r\n  return ipAdresses;\r\n};\r\n\r\n// Create our express app\r\nvar app = express();\r\n\r\n// Set the view engine to use EJS as well as set the default views directory\r\napp.set('view engine', 'ejs');\r\napp.engine('ejs', require('ejs').__express); //<-- this\r\napp.set('views', __dirname + '/public/views');\r\n// This tells Express out of which directory to serve static assets like CSS and images\r\napp.use(express.static(__dirname + '/public'));\r\n\r\n\r\n\r\n// The homepage route of our application does not interface with the MovieAnalyst API and is always accessible. We won’t use the getAccessToken middleware here. We’ll simply render the index.ejs view.\r\napp.get('/', function(req, res){\r\n  res.render('index');\r\n})\r\n\r\n// For the movies route, we’ll call the getAccessToken middleware to ensure we have an access token. If we do have a valid access_token, we’ll make a request with the superagent library and we’ll be sure to add our access_token in an Authorization header before making the request to our API.\r\n// Once the request is sent out, our API will validate that the access_token has the right scope to request the /movies resource and if it does, will return the movie data. We’ll take this movie data, and pass it alongside our movies.ejs template for rendering\r\napp.get('/movies', function(req, res){\r\n  request\r\n    .get('http://'+ backendHost + ':' + backendPort + '/movies')\r\n    .end(function(err, data) {\r\n      if(data.status == 403){\r\n        res.send(403, '403 Forbidden');\r\n      } else {\r\n        var movies = data.body;\r\n        res.render('movies', { movies: movies} );\r\n      }\r\n    })\r\n})\r\n\r\n// The process will be the same for the remaining routes. We’ll make sure to get the acess_token first and then make the request to our API to get the data.\r\n// The key difference on the authors route, is that for our client, we’re naming the route /authors, but our API endpoint is /reviewers. Our route on the client does not have to match the API endpoint route.\r\napp.get('/authors', function(req, res){\r\n  request\r\n    .get('http://'+backendHost + ':' + backendPort + '/reviewers')\r\n    .set('Authorization', 'Bearer ' + req.access_token)\r\n    .end(function(err, data) {\r\n      if(data.status == 403){\r\n        res.send(403, '403 Forbidden');\r\n      } else {\r\n        var authors = data.body;\r\n        res.render('authors', {authors : authors});\r\n      }\r\n    })\r\n})\r\n\r\napp.get('/publications', function(req, res){\r\n  request\r\n    .get('http://'+backendHost + ':' + backendPort + '/publications')\r\n    .end(function(err, data) {\r\n      if(data.status == 403){\r\n        res.send(403, '403 Forbidden');\r\n      } else {\r\n        var publications = data.body;\r\n        res.render('publications', {publications : publications});\r\n      }\r\n    })\r\n})\r\n\r\n// We’ve added the pending route, but calling this route from the MovieAnalyst Website will always result in a 403 Forbidden error as this client does not have the admin scope required to get the data.\r\napp.get('/pending', function(req, res){\r\n  request\r\n    .get('http://'+backendHost + ':' + backendPort + '/pending')\r\n    .end(function(err, data) {\r\n      if(data.status == 403){\r\n        res.send(403, '403 Forbidden');\r\n      }\r\n    })\r\n})\r\n\r\napp.get('/front/ip', function(req, res){\r\n  var backIp = getIpAdresses();\r\n  res.json(backIp)\r\n})\r\n\r\napp.get('/back/ip', function(req, res){\r\n  request\r\n    .get('http://'+backendHost + ':' + backendPort + '/ip')\r\n    .set('Authorization', 'Bearer ' + req.access_token)\r\n    .end(function(err, data) {\r\n      if(data.status == 403){\r\n        res.send(403, '403 Forbidden');\r\n      } else {\r\n        var ip = data.body;\r\n        res.json(ip);\r\n      }\r\n    })\r\n})\r\n\r\nconsole.log(\"server listening through port: \" + process.env.PORT);\r\napp.listen(process.env.PORT);\r\n","module.exports = require(\"ejs\");","module.exports = require(\"express\");","module.exports = require(\"os\");","module.exports = require(\"superagent\");"],"sourceRoot":""}